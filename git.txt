
This cheat sheet is written by Jozsef Csontos and most of it is based on the excellent introduction of Corey Schafer, https://www.youtube.com/watch?v=HVsySz-h9r4

Install:

sudo apt-get update
sudo apt-get install git

Setup:

git config --global user.name "Firstname Lastname"
git config --global user.email "your@emailaddre.ss"
to check the config: git config --list

Help:

git git_command --help, or git help git_command 
for example, 
git help config
git config --help

Working with git

the concept of "working area <-> staging area <-> local repository <-> git (remote) repository" is substantial.
(for a brief summary see https://www.youtube.com/watch?v=3a2x1iJFJWc)
working area: your local directory where you modify your files
staging area: it contains those files which are candidates for a commit to the repository (note: modified files present in the working are but not in the staging area won't be commited to the local and then to the git repository)
your local repository: it contains your commited changes (these are the candidates for the remote repo, this is where your "HEAD" is)
git repository: usually a remote directory where every developer of the project can see your commited/pushed changes

initialize a local git project:
git init
(it creates a .git directory with all the files required; to stop tracking a project just remove the .git directory)

there are two options to remove individual files from git's scope:
a) if some files are not needed in the repo, then you can edit .gitignore (to ignore git tracking for specific files put the file names into this file)
b) another scenario is when, for example, your local config files are different from those sitting on the remote repo (e.g., auxiliary files that live inside the repository but are specific to one user's workflow) should go into the $GIT_DIR/info/exclude file (if you already have unstaged changes in the files listed execute the following, git update-index --assume-unchanged file_names


Overview status:
git status

add files to the staging area:
git add file_names
git add -A (all modified files are added to the staging area)

remove files from the staging area
git reset file_name
git reset (remove all files from the staging area)

add files to the repository:
git commit -m "comment line"

check commits:
git log

clone a repository:
git clone from_url local_dir

info about the remote repo:
git remote -v

to publish local version to remote repo:
git status
git diff
git add -A/add file_name
git commit -m "info"
git pull origin master (to pull changes made since last pull)
git push origin master

resolving merge conflict using the command line and vim:
git status
open the file in vim and look for conflict markers: <<<<<<<,  =======, >>>>>>>
keep the changes you want then remove the markers
git add .
git commit -m "resolved merge conflict..."
git push origin master

Note: branches are used to create another line of development. By default, Git has a master branch. Usually, a branch is created to work on a new feature. Once the feature is completed, it is merged back with the master branch and we can delete the branch (most people keep two branches master and development). Every branch is referenced by HEAD, which points to the latest commit in the branch. Whenever you make a commit, HEAD is updated with the latest commit.

info about branches:
git branch -a

create a branch for a new feature:
git branch new-branch-name
git checkout new-branch-name

to commit the branch to remote repo and associate the local and remote branches:
git push -u origin new-branch-name
"git push" is enough from this point

merging branches when you're done with new features:
git checkout master (select the master branch on local repo)
git pull origin master (check for remote changes)
git branch --merged (merged branches?)
git merge new-branch-name (at this point you merge the two branches in the local repo)
git push origin master (push your merged master branch to the remote repo)

deleting a branch:
git branch --merged (to know about the branches merged)
git branch -d branch-name-to-be-deleted (delete the branch from local repo)
git branch -a (to view all the branches, both local and remote)
git push origin --delete branch-name-to-be-deleted (also delete from the remote repo)
git branch --merged

If you ever find that you accidentally left something out of your last commit, be it a file or an extra change to a file that you just committed, don't worry. All you have to do is stage the extra changes like you would for a normal commit without editing the original commit message:

git add your_file_modified
git commit --amend --no-edit
git push origin HEAD:refs/for/branch_name

If you get a message after invoking git status: "Your branch is ahead of 'origin/master' by 1 commit.", and you want to forget your local modifications:
git reset --hard HEAD^ 
(will discard your changes, and put back the HEAD to the last commit)

Further notes: 
git pull does a git fetch followed by a git merge
git commit -a is a shortcut for git add and git commit

