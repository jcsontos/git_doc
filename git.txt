
This cheat sheet is written by Jozsef Csontos and it is based on the excellent introduction of Corey Schafer, https://www.youtube.com/watch?v=HVsySz-h9r4

setup:

git config --global user.name "Jozsef Csontos"
git config --global user.email "jozsef.csontos@ericsson.com"
to check the config: git config --list

help:

git help config
git config --help

initialize a local git project:

git init
(it creates a .git directory with all the files required;
to stop tracking the project just remove the .git directory)

to remove individual files from git's scope:
touch .gitignore (to ignore git tracking for specific files put the file names into this file)

working area <-> staging area <-> git repository
overview status:
git status

add files to the staging area:
git add file_names
git add -A (all modified files are added to the staging area)

remove files from the staging area
git reset file_name
git reset (remove all files from the staging area)

add files to the repository:
git commit -m "comment line"

check commits:
git log

clone a repository:
git clone from_url local_dir

info about the remote repo:
git remote -v

info about branches:
git branch -a

to publish local version to remote repo:
git status
git diff
git add -A/add file_name
git commit -m "info"
git pull origin master (to pull changes made since last pull)
git push origin master

resolving merge conflict using the command line and vim:
git status
open the file in vim and look for conflict markers: <<<<<<<,  =======, >>>>>>>
keep the changes you want then remove the markers
git add .
git commit -m "resolved merge conflict..."
git push origin master

create a branch for a new feature:
git branch new-branch-name
git checkout new-branch-name

to commit the branch to remote repo and associate the local and remote branches:
git push -u origin new-branch-name
"git push" is enough from this point

merging branches when you're done with new features:
git checkout master (select the master branch on local repo)
git pull origin master (check for remote changes)
git branch --merged (merged branches?)
git merge new-branch-name (at this point you merge the two branches in the local repo)
git push origin master (push your merged master branch to the remote repo)

deleting a branch:
git branch --merged (to know about the branches merged)
git branch -d branch-name-to-be-deleted (delete the branch from local repo)
git branch -a (to view all the branches, both local and remote)
git push origin --delete branch-name-to-be-deleted (also delete from the remote repo)
git branch --merged



